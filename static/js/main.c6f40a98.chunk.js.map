{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","class","className","onClick","provider","GoogleAuthProvider","signInWithPopup","viewBox","height","width","version","xmlns","d","fill","SignOut","currentUser","href","signOut","src","logo","alt","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,ySCY3CC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAoC3B,SAASC,IAOP,OACE,oCAEJ,yBAAKC,MAAM,aAEP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,gEAGP,yBAAKA,MAAM,sBAIP,yBAAKA,MAAM,gBACP,yBAAKA,MAAM,YACP,8BACA,8BACA,+BAEJ,yBAAKA,MAAM,YACP,8BACA,8BACA,+BAEJ,uBAAIA,MAAM,eACN,0BAAMA,MAAM,qBACR,0BAAMA,MAAM,QACZ,uBAAGA,MAAM,yBAET,uBAAGC,UAAU,UAAUC,QAlCxB,WACvB,IAAMC,EAAW,IAAIf,IAASS,KAAKO,mBACnCP,EAAKQ,gBAAgBF,KAiCG,0BAAMH,MAAM,SAAZ,yBAEJ,yBAAKM,QAAQ,6BAA6BC,OAAO,MAAMC,MAAM,MAAMC,QAAQ,MAAMC,MAAM,8BAA6B,0BAAMC,EAAE,sGAAsGC,KAAK,mBAgBvP,wBAAIZ,MAAM,kDAAV,4EAUR,SAASa,IACP,OAAOhB,EAAKiB,aACd,oCAII,yBAAKd,MAAM,cAEb,uBAAGA,MAAM,SAASe,KAAK,GAAGb,QAAS,kBAAML,EAAKmB,YAE1C,yBAAKC,IAAKC,IAAMjB,UAAU,WAAWkB,IAAI,SAC/C,yBAAKnB,MAAM,UAAX,cAaA,SAASoB,IACP,IAAMC,EAAQC,mBACRC,EAAczB,EAAU0B,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAHnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAOgBC,mBAAS,IAPzB,mBAOXC,EAPW,KAOAC,EAPA,KAUZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQxC,EAAKiB,YAAvBwB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWtD,IAASU,UAAU6C,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OAAQ,oCACN,8BAEGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,OAEpE,0BAAMK,IAAKjC,KAIb,0BAAMkC,SAAUrB,GAGd,2BAAQsB,MAAOxB,EAAWyB,SAAU,SAACtB,GAAD,OAAOF,EAAaE,EAAEuB,OAAOF,QAASxD,MAAM,mBAAmB2D,YAAY,uBAC/G,4BAAQC,KAAK,SAASC,UAAW7B,GAAW,uBAAGhC,MAAM,+BAO3D,SAASkD,EAAYY,GAAQ,IAAD,EACMA,EAAMT,QAA9BZ,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAEbwB,EAAezB,IAAQzC,EAAKiB,YAAYwB,IAAM,OAAS,WAE7D,OAAQ,oCACN,yBAAKrC,UAAS,kBAAa8D,IACzB,yBAAK9C,IAAKsB,GAAY,0DACtB,2BAAIE,KAQKuB,MAvLf,WAAgB,IAAD,EAEEC,YAAapE,GAArBqE,EAFM,oBAIb,OACE,yBAAKjE,UAAU,OACb,gCACE,wBAAKD,MAAM,iBAAX,oBACA,kBAACa,EAAD,OAKF,iCAEE,yBAAKb,MAAM,wBACP,yBAAKA,MAAM,mCAGP,yBAAKA,MAAM,YACVkE,EAAO,kBAAC9C,EAAD,MAAe,kBAACrB,EAAD,WCnCnBoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/B,c","file":"static/js/main.c6f40a98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0015d06.svg\";","import React, { useRef, useState } from 'react';\nimport './App.css';\nimport './Style.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport logo from './logo.svg';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDtQtB9xIMxjfiL5S1sG60MNJ06zK_9GMg\",\n  authDomain: \"react-curd-bef16.firebaseapp.com\",\n  projectId: \"react-curd-bef16\",\n  storageBucket: \"react-curd-bef16.appspot.com\",\n  messagingSenderId: \"977324988674\",\n  appId: \"1:977324988674:web:7ff31264f6684c35db8a1b\",\n  measurementId: \"G-0JDZTQ7EYB\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2  class=\"header-h1-tag\">Chat With Sanjay</h2>\n        <SignOut />\n      </header>\n\n\n      \n      <section>\n      \n        <div class=\"pt-table desktop-768\">\n            <div class=\"pt-tablecell page-home relative\" \n                    \n                    >\n                <div class=\"overlay\"></div>\n                {user ? <ChatRoom /> : <SignIn />}\n                            \n                            \n            </div>\n        </div>\n    \n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n        \n<div class=\"container\">\n  \n    <div class=\"row\">\n        <div class=\"col-xs-12 col-md-offset-1 col-md-10 col-lg-offset-2 col-lg-8\">\n            \n\n            <div class=\"hexagon-menu clear\">\n               \n                \n                \n                <div class=\"hexagon-item\">\n                    <div class=\"hex-item\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                    <div class=\"hex-item\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                    <a  class=\"hex-content\">\n                        <span class=\"hex-content-inner\">\n                            <span class=\"icon\">\n                            <i class=\"fa-brands fa-google\"></i>\n                            </span>\n                            <a className=\"sign-in\" onClick={signInWithGoogle}>\n                            <span class=\"title\">Sign in with Google</span></a>\n                        </span>\n                        <svg viewBox=\"0 0 173.20508075688772 200\" height=\"200\" width=\"174\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M86.60254037844386 0L173.20508075688772 50L173.20508075688772 150L86.60254037844386 200L0 150L0 50Z\" fill=\"#1e2530\"></path></svg>\n                    </a>\n                </div>\n                \n                \n            </div>\n            \n        </div>\n       \n    </div>\n\n    \n\n\n</div>\n \n        <h3 class=\"animate-charcter d-flex justify-content-center\" >Do not violate the community guidelines or you will be banned for life!</h3>\n    \n\n      {/* <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button> */}\n      {/* <p>Do not violate the community guidelines or you will be banned for life!</p> */}\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n<>\n    \n    {/* <a className=\"\" onClick={() => auth.signOut()}>  Sign Out</a> */}\n\n    <div class=\"navigation\">\n  \n  <a class=\"button\" href=\"\" onClick={() => auth.signOut()}>\n      {/* <i class=\"fa-solid fa-right-from-bracket\"></i> */}\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n<div class=\"logout\">SignOut</div>\n\n  </a>\n\n</div>\n    \n\n    \n    </>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      {/* <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" /> */}\n      <input  value={formValue} onChange={(e) => setFormValue(e.target.value)}  class=\"animate-charcter\" placeholder=\"say something nice\" />\n      <button type=\"submit\" disabled={!formValue}><i class=\"fa-solid fa-paper-plane\"></i></button>\n   \n    </form>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n     \n    \n    </div>\n  </>)\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}